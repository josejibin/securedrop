Database Migrations
===================

SecureDrop uses Alembic_ for database schema migrations. This guide is not a complete explanation of
what ``alembic`` is or how it is used, so the original documentation should be read.

.. _Alembic: http://alembic.zzzcomputing.com/

Migration Files
---------------

In the ``securedrop/`` directory, the file ``alembic.ini`` contains the configuration needed to run
``alembic`` commands, and the directory ``alembic/`` contains the Python code that executes
migrations.

The directory looks like this.

.. code-block:: none

    .
    ├── alembic
    │   ├── env.py
    │   ├── script.py.mako
    │   └── versions
    │       ├── 15ac9509fc68_init.py
    │       └── faac8092c123_enable_security_pragmas.py
    └── alembic.ini

The subdirectory ``versions/`` individual migrations that are generated by ``alembic``. In the
example above, there are two migrations. ``alembic`` orders these migrations based off of values in
the Python files, not off any sort of lexicographic ordering. The file
``faac8092c123_enable_security_pragmas.py`` has a module-level documentation string that specifies
that it comes after ``15ac9509fc68_init.py`` as well as variables used by alembic that specify the
ordering of migrations.

Deployment
----------

Database migrations are automatically applied to production instances via the command
``alembic upgrade head`` in the ``postinst`` script in the ``securedrop-app-code`` Debian package.
You do not need to worry about when or how these migrations are applied.

Developer Workflow
------------------

When you want to modify the database schema, you need to add adjust the models in the file
``models.py``. All indices, constraints, or other metadata about the scheme needs to be in this
file. The development server creates tables directly from the subclasses of ``db.Model`` so that
they are available for manual and automated testing.

Once you are satisfied with your new model, ``alembic`` can auto-generate migrations using
SQLAlchemy metadata and comparing it to the schema of an up-to-date SQLite database. To generate a
new migration use the following steps.

.. code-block:: none

    cd securedrop/
    ./bin/dev-shell
    ./bin/new-migration 'my migration message'

This will output a new migration into ``alembic/versions/``. You will need to verify that this
migration produced the desired output. While still in the ``dev-shell``, you can run the following
command to see an output of the SQL that will be generated.

.. code-block:: none

    alembic upgrade head --sql
